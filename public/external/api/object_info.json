{
  "Image_Quality_Control": {
    "name": "Image_Quality_Control",
    "category": "Quality",
    "display_name": "Image Quality Control",
    "description": "Controls the quality of dynamic scan images",
    "python_module": "nodes.quality",
    "input": {
      "required": {
        "Dynamic Scan": ["IMAGE"]
      }
    },
    "input_order": {
      "required": ["Dynamic Scan"]
    },
    "output": ["IMAGE", "DICT"],
    "output_name": ["Dynamic Scan", "Image Quality"],
    "output_is_list": [false, false],
    "output_node": false
  },
  "plugin.smooth.smooth_3d": {
    "name": "plugin.smooth.smooth_3d",
    "category": "plugins/smooth",
    "display_name": "Smooth (3D)",
    "description": "smooth 3D data",
    "python_module": "custom_nodes.smooth.smooth_3d",
    "input": {
      "required": {
        "data": ["3D"]
      },
      "optional": {
        "sigma": [
          "FLOAT",
          {
            "default": 4,
            "min": 0,
            "max": 50,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": ["data"],
      "optional": ["sigma"]
    },
    "output": ["3D", "STRING"],
    "output_name": ["data", "test_txt"],
    "output_is_list": [false, false],
    "output_node": false
  },
  "plugin.get_nifti.get_nifti": {
    "name": "plugin.get_nifti.get_nifti",
    "category": "plugins/get_nifti",
    "display_name": "Get NIFTI",
    "description": "生成nifti并存入缓存,返回这个序列的nifti地址",
    "python_module": "custom_nodes.get_nifti.get_nifti",
    "input": {
      "required": {
        "series": ["3D"]
      }
    },
    "input_order": {
      "required": ["series"]
    },
    "output": ["3D"],
    "output_name": ["nifti"],
    "output_is_list": [false],
    "output_node": false
  },

<<<<<<< HEAD
  "Dynamic_Scan_Validator": {
    "name": "Dynamic_Scan_Validator",
    "category": "Validation",
    "display_name": "Dynamic Scan Validator",
    "description": "Validates dynamic scan data",
    "python_module": "nodes.validator",
    "input": {
      "required": {
        "Dynamic Scan": ["IMAGE"]
      }
    },
    "input_order": {
      "required": ["Dynamic Scan"]
    },
    "output": ["IMAGE"],
    "output_name": ["Complex Data"],
    "output_is_list": [false],
    "output_node": false
  },

  "Phase_Map_Calculator": {
    "name": "Phase_Map_Calculator",
    "category": "Calculation",
    "display_name": "Phase Map Calculator",
    "description": "Calculates phase maps from complex data",
    "python_module": "nodes.calculator",
    "input": {
      "required": {
        "Complex Data": ["IMAGE"]
      }
    },
    "input_order": {
      "required": ["Complex Data"]
    },
    "output": ["IMAGE", "IMAGE", "IMAGE"],
    "output_name": ["Phase Map", "Phase Mask", "Complex Data"],
    "output_is_list": [false, false, false],
    "output_node": false
  },

  "RMPFSL_Calculator": {
    "name": "RMPFSL_Calculator",
    "category": "Calculation",
    "display_name": "RMPFSL Calculator",
    "description": "Calculates RMPFSL from complex data",
    "python_module": "nodes.calculator",
    "input": {
      "required": {
        "Complex Data": ["IMAGE"]
      }
    },
    "input_order": {
      "required": ["Complex Data"]
    },
    "output": ["IMAGE"],
    "output_name": ["Rmpfsl Result"],
    "output_is_list": [false],
    "output_node": false
  },

  "Input_Node": {
    "name": "Input_Node",
    "category": "Input",
    "display_name": "Input Node",
    "description": "Input node for multiple data types",
    "python_module": "nodes.input",
    "input": {
      "required": {
        "Dynamic Scan": ["IMAGE"],
        "B1 Map": ["IMAGE"],
        "Dictionary": ["DICT"]
      }
    },
    "input_order": {
      "required": ["Dynamic Scan", "B1 Map", "Dictionary"]
    },
    "output": ["IMAGE", "IMAGE", "DICT", "FLOAT"],
    "output_name": ["Dynamic Scan", "B1 Map", "Dictionary", "TSL"],
    "output_is_list": [false, false, false, false],
    "output_node": false
  },

  "MPF_Calculator": {
    "name": "MPF_Calculator",
    "category": "Calculation",
    "display_name": "MPF Calculator",
    "description": "Calculates MPF from complex data",
    "python_module": "nodes.calculator",
    "input": {
      "required": {
        "Complex Data": ["IMAGE"],
        "B1 Map": ["IMAGE"],
        "Dictionary": ["DICT"],
        "TSL": ["FLOAT"]
      }
    },
    "input_order": {
      "required": ["Complex Data", "B1 Map", "Dictionary"]
    },
    "output": ["IMAGE"],
    "output_name": ["MPF Result"],
    "output_is_list": [false],
    "output_node": false
  },

  "ROI_Analyzer": {
    "name": "ROI_Analyzer",
    "category": "Analysis",
    "display_name": "ROI Analyzer",
    "description": "Analyzes regions of interest",
    "python_module": "nodes.analyzer",
    "input": {
      "required": {
        "Rmpfsl Result": ["IMAGE"],
        "MPF Result": ["IMAGE"],
        "ROI Mask": ["MASK"],
        "Phase Mask": ["IMAGE"]
      }
    },
    "input_order": {
      "required": ["Rmpfsl Result", "MPF Result", "ROI Mask"]
    },
    "output": ["IMAGE", "IMAGE", "DICT", "DICT"],
    "output_name": ["Rmpfsl Histogram", "MPF Histogram", "Rmpfsl Statistic", "MPF Statistic"],
    "output_is_list": [false, false, false, false],
    "output_node": false
  },

  "Generate_ROI_Mask": {
    "name": "Generate_ROI_Mask",
    "category": "ROI",
    "display_name": "Generate ROI Mask",
    "description": "Generates ROI mask from results",
    "python_module": "nodes.roi",
    "input": {
      "required": {
        "Rmpfsl Result": ["IMAGE"],
        "MPF Result": ["IMAGE"]
      }
    },
    "input_order": {
      "required": ["Rmpfsl Result", "MPF Result"]
    },
    "output": ["MASK"],
    "output_name": ["ROI Mask"],
    "output_is_list": [false],
    "output_node": false
  },

  "MPF_Report": {
    "name": "MPF_Report",
    "category": "Report",
    "display_name": "MPF Report",
    "description": "Generates MPF analysis report",
    "python_module": "nodes.report",
    "input": {
      "required": {
        "Rmpfsl Histogram": ["IMAGE"],
        "MPF Histogram": ["IMAGE"],
        "Rmpfsl Statistic": ["DICT"],
        "MPF Statistic": ["DICT"],
        "Image Quality": ["DICT"]
      }
    },
    "input_order": {
      "required": ["Rmpfsl Histogram", "MPF Histogram", "Rmpfsl Statistic", "MPF Statistic", "Image Quality"]
    },
    "output": ["DICT"],
    "output_name": ["Analysis Report"],
    "output_is_list": [false],
    "output_node": false
  },

  
=======
>>>>>>> upstream/pmt
  "input.boolean": {
    "name": "input.boolean",
    "category": "input",
    "display_name": "Boolean",
    "description": "BOOLEAN",
    "python_module": "nodes",
    "input": {
      "required": {
        "bool": ["BOOLEAN"]
      }
    },
    "input_order": {
      "required": ["bool"]
    },
    "output": ["BOOLEAN"],
    "output_name": ["BOOLEAN"],
    "output_is_list": [false],
    "output_node": false
  },
  "input.int": {
    "name": "input.int",
    "category": "input",
    "display_name": "Int",
    "description": "INT",
    "python_module": "nodes",
    "input": {
      "required": {
        "int": ["INT"]
      }
    },
    "input_order": {
      "required": ["int"]
    },
    "output": ["INT"],
    "output_name": ["INT"],
    "output_is_list": [false],
    "output_node": false
  },
  "input.float": {
    "name": "input.float",
    "category": "input",
    "display_name": "Float",
    "description": "FLOAT",
    "python_module": "nodes",
    "input": {
      "required": {
        "float": [
          "FLOAT",
          {
            "step": 0.1,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": ["float"]
    },
    "output": ["FLOAT"],
    "output_name": ["FLOAT"],
    "output_is_list": [false],
    "output_node": false
  },
  "input.text": {
    "name": "input.text",
    "category": "input",
    "display_name": "Text",
    "description": "STRING",
    "python_module": "nodes",
    "input": {
      "required": {
        "text": ["STRING"]
      }
    },
    "input_order": {
      "required": ["text"]
    },
    "output": ["STRING"],
    "output_name": ["STRING"],
    "output_is_list": [false],
    "output_node": false
  },
  "input.textarea": {
    "name": "input.textarea",
    "category": "input",
    "display_name": "Textarea",
    "description": "STRING (multiline)",
    "python_module": "nodes",
    "input": {
      "required": {
        "textarea": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": ["textarea"]
    },
    "output": ["STRING"],
    "output_name": ["STRING"],
    "output_is_list": [false],
    "output_node": false
  },
  "input.load_image": {
    "name": "input.load_image",
    "category": "input",
    "display_name": "Load Image",
    "description": "",
    "python_module": "nodes",
    "input": {
      "required": {
        "image": [
          [
            ""
          ],
          {
            "image_upload2": true
          }
        ]
      }
    },
    "input_order": {
      "required": ["image"]
    },
    "output": ["IMAGE_FILE"],
    "output_name": ["IMAGE_FILE"],
    "output_is_list": [false],
    "output_node": false
  },
  "input.load_dicom": {
    "name": "input.load_dicom",
    "category": "input",
    "display_name": "Load DICOM",
    "description": "",
    "python_module": "nodes",
    "input": {
      "required": {
        "oid": [
          [
            ""
          ],
          {
            "dicom_upload": false
          }
        ]
      }
    },
    "input_order": {
      "required": ["oid"]
    },
    "output": ["DICOM_FILE"],
    "output_name": ["DICOM_FILE"],
    "output_is_list": [false],
    "output_node": false
  },
  "input.load_nifti": {
    "name": "input.load_nifti",
    "category": "input",
    "display_name": "Load NIFTI",
    "description": "",
    "python_module": "nodes",
    "input": {
      "required": {
        "oid": [
          [
            ""
          ],
          {
            "nifti_upload": false
          }
        ]
      }
    },
    "input_order": {
      "required": ["oid"]
    },
    "output": ["NIFTI_FILE"],
    "output_name": ["NIFTI_FILE"],
    "output_is_list": [false],
    "output_node": false
  },

  "manual.segmentation": {
    "name": "manual.segmentation",
    "category": "manual",
    "display_name": "Segmentation",
    "description": "Manual segmentations.",
    "python_module": "custom_nodes.manual.segmentation",
    "input": {
      "required": {
        "DICOM_FILE": ["DICOM_FILE"]
      }
    },
    "input_order": {
      "required": [
        "DICOM_FILE"
      ]
    },
    "output": ["NIFTI_FILE"],
    "output_name": ["labelmap.nii.gz"],
    "output_is_list": [false],
    "output_node": false
  },

  "plugin.head_deident.execution": {
    "name": "plugin.head_deident.execution",
    "category": "plugins/head_deident",
    "display_name": "Head De-identify",
    "description": "Head de-identifcation",
    "python_module": "custom_nodes.head_deident.execution",
    "input": {
      "required": {
        "head_data": ["3D"]
      },
      "optional": {
        "modality": [
          [
            "CT",
            "MR"
          ]
        ],
        "threshold": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "thick": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "distort": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "organ_eyes": [
          ["blur", "remove", "keep"]
        ],
        "organ_nose": [
          ["blur", "remove", "keep"]
        ],
        "organ_mouth": [
          ["blur", "remove", "keep"]
        ]
      }
    },
    "input_order": {
      "required": ["head_data"],
      "optional": ["modality", "threshold", "thick", "distort", "organ_eyes", "organ_nose", "organ_mouth"]
    },
    "output": ["3D", "3D", "3D", "3D", "3D"],
    "output_name": ["de_identified_data", "mask", "refined_mask", "contour", "difference_data"],
    "output_is_list": [false, false, false, false, false],
    "output_node": false
  },
  "plugin.ocr_deident.deident_ocr": {
    "name": "plugin.ocr_deident.deident_ocr",
    "category": "plugins/ocr_deident",
    "display_name": "OCR De-identify",
    "description": "OCR de-identifcation",
    "python_module": "custom_nodes.ocr_deident.deident_ocr",
    "input": {
      "required": {
        "dicom_obj": ["DICOM"]
      },
      "optional": {
        "sensitive_list": [
          "STRING",
          {
            "default": "PatientName,PatientID,PatientBirthDate",
            "multiline": true
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "width": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "height": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "roi_only": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "use_gpu": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": ["dicom_obj"],
      "optional": ["sensitive_list", "x", "y", "width", "height", "roi_only", "use_gpu"]
    },
    "output": ["2D"],
    "output_name": ["data"],
    "output_is_list": [false],
    "output_node": false
  },
  "plugin.smooth.smooth_2d": {
    "name": "plugin.smooth.smooth_2d",
    "category": "plugins/smooth",
    "display_name": "Smooth (2D)",
    "description": "smooth 2D data",
    "python_module": "custom_nodes.smooth.smooth_2d",
    "input": {
      "required": {
        "data": ["2D"]
      },
      "optional": {
        "sigma": [
          "FLOAT",
          {
            "default": 4,
            "min": 0,
            "max": 50,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": ["data"],
      "optional": ["sigma"]
    },
    "output": ["2D", "STRING"],
    "output_name": ["data", "test_txt"],
    "output_is_list": [false, false],
    "output_node": false
  },
  "plugin.smooth.smooth_3d": {
    "name": "plugin.smooth.smooth_3d",
    "category": "plugins/smooth",
    "display_name": "Smooth (3D)",
    "description": "smooth 3D data",
    "python_module": "custom_nodes.smooth.smooth_3d",
    "input": {
      "required": {
        "data": ["3D"]
      },
      "optional": {
        "sigma": [
          "FLOAT",
          {
            "default": 4,
            "min": 0,
            "max": 50,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": ["data"],
      "optional": ["sigma"]
    },
    "output": ["3D", "STRING"],
    "output_name": ["data", "test_txt"],
    "output_is_list": [false, false],
    "output_node": false
  },
  "plugin.get_nifti.get_nifti": {
    "name": "plugin.get_nifti.get_nifti",
    "category": "plugins/get_nifti",
    "display_name": "Get NIFTI",
    "description": "生成nifti并存入缓存,返回这个序列的nifti地址",
    "python_module": "custom_nodes.get_nifti.get_nifti",
    "input": {
      "required": {
        "series": ["3D"]
      }
    },
    "input_order": {
      "required": ["series"]
    },
    "output": ["3D"],
    "output_name": ["nifti"],
    "output_is_list": [false],
    "output_node": false
  },

  "converter.file_to_data.image_to_2d": {
    "name": "converter.file_to_data.image_to_2d",
    "category": "coverters/file_to_data",
    "display_name": "Image to 2D",
    "description": "Convert image file to 2D data.",
    "python_module": "custom_nodes.file_to_data.image_to_2d",
    "input": {
      "required": {
        "IMAGE_FILE": ["IMAGE_FILE"]
      }
    },
    "input_order": {
      "required": ["IMAGE_FILE"]
    },
    "output": ["2D"],
    "output_name": ["data"],
    "output_is_list": [false],
    "output_node": false
  },
  "converter.file_to_data.dicom_to_2d": {
    "name": "converter.file_to_data.dicom_to_2d",
    "category": "coverters/file_to_data",
    "display_name": "DICOM to 2D",
    "description": "Convert DICOM file to 2D data.",
    "python_module": "custom_nodes.file_to_data.dicom_to_2d",
    "input": {
      "required": {
        "DICOM_FILE": ["DICOM_FILE"]
      }
    },
    "input_order": {
      "required": ["DICOM_FILE"]
    },
    "output": ["2D"],
    "output_name": ["data"],
    "output_is_list": [false],
    "output_node": false
  },
  "converter.file_to_data.dicom_volume_to_3d": {
    "name": "converter.file_to_data.dicom_volume_to_3d",
    "category": "coverters/file_to_data",
    "display_name": "DICOM Volume to 3D",
    "description": "Convert DICOM volume file to 3D data.",
    "python_module": "custom_nodes.file_to_data.dicom_volume_to_3d",
    "input": {
      "required": {
        "DICOM_VOLUME_FILE": ["DICOM_VOLUME_FILE"]
      }
    },
    "input_order": {
      "required": ["DICOM_VOLUME_FILE"]
    },
    "output": ["3D"],
    "output_name": ["data"],
    "output_is_list": [false],
    "output_node": false
  },
  "converter.file_to_data.nifti_to_3d": {
    "name": "converter.file_to_data.nifti_to_3d",
    "category": "coverters/file_to_data",
    "display_name": "NIFTI to 3D",
    "description": "Convert NIFTI file to 3D data.",
    "python_module": "custom_nodes.file_to_data.nifti_to_3d",
    "input": {
      "required": {
        "NIFTI_FILE": ["NIFTI_FILE"]
      }
    },
    "input_order": {
      "required": ["NIFTI_FILE"]
    },
    "output": ["3D"],
    "output_name": ["data"],
    "output_is_list": [false],
    "output_node": false
  },
  "converter.data_to_file.2d_to_image": {
    "name": "converter.data_to_file.2d_to_image",
    "category": "coverters/data_to_file",
    "display_name": "2D to Image",
    "description": "Convert 2D data to image file.",
    "python_module": "custom_nodes.data_to_file.2d_to_image",
    "input": {
      "required": {
        "data": ["2D"],
        "format": [
          [
            "png",
            "jpg"
          ]
        ]
      },
      "optional": {
        "normalize": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": ["data", "format"],
      "optional": ["normalize"]
    },
    "output": ["IMAGE_FILE"],
    "output_name": ["IMAGE_FILE"],
    "output_is_list": [false],
    "output_node": false
  },
  "converter.data_to_file.2d_to_dicom": {
    "name": "converter.data_to_file.2d_to_dicom",
    "category": "coverters/data_to_file",
    "display_name": "2D to DICOM",
    "description": "Convert 2D data to DICOM file.",
    "python_module": "custom_nodes.data_to_file.2d_to_dicom",
    "input": {
      "required": {
        "data": ["2D"]
      }
    },
    "input_order": {
      "required": ["data"]
    },
    "output": ["DICOM_FILE"],
    "output_name": ["DICOM_FILE"],
    "output_is_list": [false],
    "output_node": false
  },
  "converter.data_to_file.2d_to_nifti": {
    "name": "converter.data_to_file.2d_to_nifti",
    "category": "coverters/data_to_file",
    "display_name": "2D to NIFTI",
    "description": "Convert 2D data to NIFTI file.",
    "python_module": "custom_nodes.data_to_file.2d_to_nifti",
    "input": {
      "required": {
        "data": ["2D"]
      }
    },
    "input_order": {
      "required": ["data"]
    },
    "output": ["NIFTI_FILE"],
    "output_name": ["NIFTI_FILE"],
    "output_is_list": [false],
    "output_node": false
  },
  "converter.data_to_file.3d_to_dicom_volume": {
    "name": "converter.data_to_file.3d_to_dicom_volume",
    "category": "coverters/data_to_file",
    "display_name": "3D to DICOM Volume",
    "description": "Convert 3D data to DICOM volume file.",
    "python_module": "custom_nodes.data_to_file.3d_to_dicom_volume",
    "input": {
      "required": {
        "data": ["3D"]
      }
    },
    "input_order": {
      "required": ["data"]
    },
    "output": ["DICOM_VOLUME_FILE"],
    "output_name": ["DICOM_VOLUME_FILE"],
    "output_is_list": [false],
    "output_node": false
  },
  "converter.data_to_file.3d_to_nifti": {
    "name": "converter.data_to_file.3d_to_nifti",
    "category": "coverters/data_to_file",
    "display_name": "3D to NIFTI",
    "description": "Convert 3D data to NIFTI file.",
    "python_module": "custom_nodes.data_to_file.3d_to_nifti",
    "input": {
      "required": {
        "data": ["3D"]
      }
    },
    "input_order": {
      "required": ["data"]
    },
    "output": ["NIFTI_FILE"],
    "output_name": ["NIFTI_FILE"],
    "output_is_list": [false],
    "output_node": false
  },
  "converter.data_to_data.2d_to_tensor": {
    "name": "converter.data_to_data.2d_to_tensor",
    "category": "coverters/data_to_data",
    "display_name": "2D to Tensor",
    "description": "Convert 2D data to torch.Tensor python datatype.",
    "python_module": "custom_nodes.data_to_data.2d_to_tensor",
    "input": {
      "required": {
        "data": ["2D"]
      }
    },
    "input_order": {
      "required": ["data"]
    },
    "output": ["IMAGE"],
    "output_name": ["tensor"],
    "output_is_list": [false],
    "output_node": false
  },

  "preview.volview": {
    "name": "preview.volview",
    "category": "preview",
    "display_name": "VolView",
    "description": "",
    "python_module": "custom_nodes.preview.volview",
    "input": {
      "optional": {
        "IMAGE_FILE": ["IMAGE_FILE"],
        "DICOM_FILE": ["DICOM_FILE"],
        "DICOM_VOLUME_FILE": ["DICOM_VOLUME_FILE"],
        "NIFTI_FILE": ["NIFTI_FILE"]
      }
    },
    "input_order": {
      "optional": [
        "IMAGE_FILE",
        "DICOM_FILE",
        "DICOM_VOLUME_FILE",
        "NIFTI_FILE"
      ]
    },
    "output": [],
    "output_name": [],
    "output_is_list": [],
    "output_node": true
  },

  "output.export": {
    "name": "output.export",
    "category": "output",
    "display_name": "Export",
    "description": "",
    "python_module": "custom_nodes.output.export",
    "input": {
      "optional": {
        "IMAGE_FILE": ["IMAGE_FILE"],
        "DICOM_FILE": ["DICOM_FILE"],
        "DICOM_VOLUME_FILE": ["DICOM_VOLUME_FILE"],
        "NIFTI_FILE": ["NIFTI_FILE"]
      }
    },
    "input_order": {
      "optional": [
        "IMAGE_FILE",
        "DICOM_FILE",
        "DICOM_VOLUME_FILE",
        "NIFTI_FILE"
      ]
    },
    "output": [],
    "output_name": [],
    "output_is_list": [],
    "output_node": true
  }
}